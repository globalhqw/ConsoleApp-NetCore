
C# 发展历史

‎2017‎年‎09‎月‎20‎日
    
本文内容
C# 1.0 版
C# 2.0 版
C# 3.0 版
C# 4.0 版
C# 5.0 版
C# 6.0 版
C# 7.0 版
最初版本的语言是什么样的？ 之后又是如何演化的？

    C# 1.0 版
        回想起来，C# 1.0 版非常像 Java。 在 ECMA 制定的设计目标中，它旨在成为一种“简单、现代、面向对象的常规用途语言”。 当时，它和 Java 类似，说明已经实现了上述早期设计目标。
        不过如果现在回顾 C# 1.0，你会觉得有点晕。 它没有我们习以为常的内置异步功能和以泛型为中心的巧妙功能。 其实它完全不具备泛型。 那 LINQ 呢？ 尚不可用。 需要几年后才会面世。
        与现在的 C# 相比，C# 1.0 版少了很多功能。 你会发现自己的代码很冗长。 不过凡事总要有个开始。 在 Windows 平台上，C# 1.0 版是 Java 的一个可行的替代之选。
   
    C# 2.0 版
        从此以后事情变得有趣起来。 让我们看看 C# 2.0（2005 年发布）和 Visual Studio 2005 中的一些主要功能：
        泛型
        分部类型
        匿名方法
        可以为 null 的类型
        迭代器
        协变和逆变
        C# 一开始是非常通用的面向对象的 (OO) 语言，而 C# 2.0 版很快改变了这一点。 做好基础准备后，他们开始追求解决一些严重影响开发者的难点。 结果他们彻底地解决了这些问题。
        通过泛型，你将获得可以对任意类型操作的类型和方法，同时保持类型安全性。 例如，通过 List<T>，你将获得 List<string> 或 List<int>
        并且可以对这些字符串或整数执行类型安全操作，同时对其进行循环访问。 比起为每个操作从 Object 创建 ListInt 继承者或强制转换要好很多。
        C# 2.0 版引入了迭代器。 简单地说就是可以使用 foreach 循环对 List（或其他可枚举类型）中的项进行循环访问。 这是该语言最重要的一部分，显著提升了语言的可读性以及人们推出代码的能力。
        不过 C# 依然在追赶 Java 的道路上。 当时 Java 已发布包含泛型和迭代器的版本。 但是随着语言各自的演化，形势很快发生了变化。
                
    C# 3.0 版
        C# 3.0 版和 Visual Studio 2008 一起发布于 2007 年下半年，但完整的语言功能是在 .NET Framework 3.5 版中发布的。 此版本标示着 C# 发展过程中的重大更改。 C# 成为了真正强大的编程语言。 我们来看看此版本中的一些主要功能：
        自动实现的属性
        匿名类型
        查询表达式
        Lambda 表达式
        表达式树
        扩展方法
        回顾过去，这些功能中大多数似乎都是不可或缺，难以分割的。 它们的组合都是经过巧妙布局。 我们通常认为 C# 版本的杀手锏是查询表达式，也就是语言集成查询 (LINQ)。
        LINQ 的构造可以建立在更细微的视图检查表达式树、Lambda 表达式以及匿名类型的基础上。 不过无论如何 C# 3.0 都提出了革命性的概念。 C# 3.0 开始为 C# 转变为面向对象/函数式混合语言打下基础。
        具体来说，你现在可以编写 SQL 样式的声明性查询对集合以及其他项目执行操作。 无需再编写 for 循环来计算整数列表的平均值，现在可改用简单的 list.Average() 方法。 组合使用查询表达式和扩展方法让各种数字变得智能多了。
        人们需要一些时间来掌握和吸收这种概念，不过已经逐渐做到了。 现在又过了几年，代码变得更简洁，功能也更强大了。
                
    C# 4.0 版
        C# 4.0 版很难达到 3.0 版的创新水平。 在 3.0 版中，C# 已经完全从 Java 的阴影中脱颖而出，崭露头角。 很快成为一种简洁精炼的语言。
        下一版本引入了一些有趣的新功能：
        动态绑定
        命名参数/可选参数
        泛型协变和逆变
        嵌入的互操作类型
        嵌入的互操作类型缓和了部署难点。 泛型协变和逆变提供了更强的功能来使用泛型，但风格比较偏学术，应该最受框架和库创建者的喜爱。 命名参数和可选参数帮助消除了很多方法重载，让使用更方便。 但是这些功能都没有完全改变模式。
        主要功能是引入 dynamic 关键字。 在 C# 4.0 版中引入 dynamic 关键字让用户可以替代编译时类型上的编译器。 通过使用 dynamic 关键字，可以创建和动态类型语言（例如 JavaScript）类似的构造。 可以创建 dynamic x = "a string" 再向它添加六个，然后让运行时理清下一步操作。
        这就存在出错的可能性，不过同时也为你提供了强大的语言功能。
                
    C# 5.0 版
        C# 5.0 版是该语言非常有针对性的一个版本。 在此版本中所做的所有工作几乎都针对另一个突破性的语言概念。 下面是主要功能列表：
        异步成员
        调用方信息特性
        调用方信息特性让你可以轻松检索上下文的信息，不需要采用大量样本反射代码。 这在诊断和日志记录任务中也很有用。
        但是 async 和 await 才是此版本真正的主角。 C# 在 2012 年推出这些功能时，将异步引入语言作为最重要的组成部分，另现状大为改观。 如果你以前处理过冗长的运行操作以及实现回调的 Web，应该会爱上这项语言功能。
                
    C# 6.0 版
        C# 在 3.0 版和 5.0 版对面向对象的语言添加了令人影响深刻的功能。 在 6.0 版中，它不再推出主导性的杀手锏，而是发布了很多让语言用户喜爱的功能。 以下介绍了部分功能：
        静态导入
        异常筛选器
        属性初始值设定项
        Expression bodied 成员
        Null 传播器
        字符串内插
        nameof 运算符
        字典初始值设定项
        这些功能每一个都很有趣。 但从整体来看，可以发现一个有趣的模式。 在此版本中，C# 消除语言样本，让代码更简洁且更具可读性。 所以对喜欢简洁代码的用户来说，此语言版本非常成功。
        除了发布此版本，他们还做了另一件事，虽然这件事本身与传统的语言功能无关。 他们发布了 Roslyn 编译器即服务。 C# 编译器现在是用 C# 编写的，你可以使用编译器作为编程工作的一部分。
                
    C# 7.0 版
        C# 7.0 版是最新的主版本。 虽然该版本继承和发展了 C# 6.0，但不包含编译器即服务。 以下介绍了部分新增功能：
        Out 变量
        元组和析构函数
        模式匹配
        本地函数
        已扩展 expression bodied 成员
        Ref 局部变量和返回结果
        这些都为开发者提供了很棒的新功能，帮助编写比以往任何时候都简洁的代码。 重点是缩减了使用 out 关键字的变量声明，并通过元组实现了多个返回值。
        但 C# 的用途更加广泛了。 .NET Core 现在面向所有操作系统，着眼于云和可移植性。 语言设计者除了推出新功能外，也会在这方面付出时间和精力。



